{"version":3,"sources":["context/context.js","components/Pixel.js","components/Row.js","components/DrawingPanel.js","assets/pixelArt.svg","components/Editor.js","components/App.js","index.js"],"names":["AppContext","createContext","AppProvider","children","useState","panelWidth","setPanelWidth","panelHeight","setPanelHeight","isOptions","setIsOptions","isDrawingPanel","setIsDrawingPanel","buttonText","setButtonText","selectedColor","setSelectedColor","Provider","value","initializeDrawingPanel","changeColor","color","hex","useGlobalContext","useContext","Pixel","pixelcolor","setPixelcolor","oldColor","setOldColor","isChangeColor","setIsChangeColor","className","onClick","onMouseEnter","onMouseLeave","style","background","Row","pixels","i","push","DrawingPanel","panelRef","useRef","rows","ref","exportComponentAsPNG","Editor","src","pixelArt","alt","type","max","min","onChange","e","target","onChangeComplete","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.79b7f5e7.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  //?Global States\r\n  const [panelWidth, setPanelWidth] = useState(16);\r\n  const [panelHeight, setPanelHeight] = useState(16);\r\n  const [isOptions, setIsOptions] = useState(false);\r\n  const [isDrawingPanel, setIsDrawingPanel] = useState(true);\r\n  const [buttonText, setButtonText] = useState(\"start drawing\");\r\n  const [selectedColor, setSelectedColor] = useState(\"#f44336\");\r\n\r\n  //? Handlers\r\n  const initializeDrawingPanel = () => {\r\n    setIsOptions(!isOptions);\r\n    setIsDrawingPanel(!isDrawingPanel);\r\n\r\n    buttonText === \"start drawing\"\r\n      ? setButtonText(\"reset\")\r\n      : setButtonText(\"start drawing\");\r\n  };\r\n\r\n  const changeColor = (color) => {\r\n    setSelectedColor(color.hex);\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        panelWidth,\r\n        setPanelWidth,\r\n        panelHeight,\r\n        setPanelHeight,\r\n        isOptions,\r\n        setIsOptions,\r\n        isDrawingPanel,\r\n        setIsDrawingPanel,\r\n        buttonText,\r\n        selectedColor,\r\n        setSelectedColor,\r\n        setButtonText,\r\n        initializeDrawingPanel,\r\n        changeColor,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\n//? Custom Hook\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n","import React, { useState } from \"react\";\n\n//? Context\nimport { useGlobalContext } from \"../context/context\";\n\n//? Styles\nimport \"../styles/pixel.scss\";\n\nconst Pixel = () => {\n  const { selectedColor } = useGlobalContext();\n\n  //? Local States\n  const [pixelcolor, setPixelcolor] = useState(\"#fff\");\n  const [oldColor, setOldColor] = useState(pixelcolor);\n  const [isChangeColor, setIsChangeColor] = useState(true);\n\n  //? handlers\n  const applyColor = () => {\n    setPixelcolor(selectedColor);\n    setIsChangeColor(false);\n  };\n\n  const changeColorOnHover = () => {\n    setOldColor(pixelcolor);\n    setPixelcolor(selectedColor);\n  };\n\n  const resetColor = () => {\n    if (isChangeColor) {\n      setPixelcolor(oldColor);\n    } else {\n      setIsChangeColor(true);\n    }\n  };\n\n  return (\n    <div\n      className=\"pixel\"\n      onClick={applyColor}\n      onMouseEnter={changeColorOnHover}\n      onMouseLeave={resetColor}\n      style={{ background: pixelcolor }}\n    ></div>\n  );\n};\n\nexport default Pixel;\n","import React from \"react\";\n\n//? Components\nimport Pixel from \"./Pixel\";\n//? Styles\nimport \"../styles/row.scss\";\nimport { useGlobalContext } from \"../context/context\";\n\nconst Row = () => {\n  const { panelWidth } = useGlobalContext();\n  let pixels = [];\n\n  for (let i = 0; i < panelWidth; i++) {\n    pixels.push(<Pixel key={i} />);\n  }\n  return <div className=\"row\">{pixels}</div>;\n};\n\nexport default Row;\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport { exportComponentAsPNG } from \"react-component-export-image\";\n\n//? Context\nimport { useGlobalContext } from \"../context/context\";\n\n//? Style\nimport \"../styles/drawingPanel.scss\";\n\n//? Components\nimport Row from \"./Row\";\n\nconst DrawingPanel = () => {\n  const { panelHeight } = useGlobalContext();\n  const panelRef = useRef();\n\n  let rows = [];\n\n  for (let i = 0; i < panelHeight; i++) {\n    rows.push(<Row key={i} />);\n  }\n\n  return (\n    <div className=\"drawing-panel\">\n      <div className=\"drawing-panel__pixels\" ref={panelRef}>\n        {rows}\n      </div>\n      <button\n        onClick={() => exportComponentAsPNG(panelRef)}\n        className=\"drawing-panel__btn  button\"\n      >\n        Export as PNG\n      </button>\n    </div>\n  );\n};\n\nexport default DrawingPanel;\n","export default __webpack_public_path__ + \"static/media/pixelArt.0a4d5c00.svg\";","import React, { useState } from \"react\";\nimport { CirclePicker } from \"react-color\";\n\n//? Context\nimport { useGlobalContext } from \"../context/context\";\n\n//? Styles\nimport \"../styles/editor.scss\";\n\n//? Components\nimport DrawingPanel from \"./DrawingPanel\";\n\n//? Images\nimport pixelArt from \"../assets/pixelArt.svg\";\n\nconst Editor = () => {\n  const {\n    panelWidth,\n    setPanelWidth,\n    panelHeight,\n    setPanelHeight,\n    isOptions,\n    isDrawingPanel,\n    buttonText,\n    selectedColor,\n    initializeDrawingPanel,\n    changeColor,\n  } = useGlobalContext();\n\n  return (\n    <div className=\"editor\">\n      <div className=\"editor__bg\">\n        <img src={pixelArt} alt=\"pixel art\" />\n      </div>\n      {isDrawingPanel && (\n        <h2 className=\"editor__heading\">Enter Panel Dimensions</h2>\n      )}\n      {isDrawingPanel && (\n        <div className=\"editor__options\">\n          <div className=\"editor__input\">\n            <input\n              type=\"number\"\n              value={panelWidth}\n              max=\"80\"\n              min=\"4\"\n              onChange={(e) => {\n                setPanelWidth(e.target.value);\n              }}\n            />\n            <span>Width</span>\n          </div>\n          <div className=\"editor__input\">\n            <input\n              type=\"number\"\n              value={panelHeight}\n              max=\"30\"\n              min=\"4\"\n              onChange={(e) => {\n                setPanelHeight(e.target.value);\n              }}\n            />\n            <span>Height</span>\n          </div>\n        </div>\n      )}\n      <button onClick={initializeDrawingPanel} className=\"editor__btn button\">\n        {buttonText}\n      </button>\n\n      {isOptions && (\n        <CirclePicker\n          color={selectedColor}\n          onChangeComplete={changeColor}\n          className=\"editor__btn\"\n        />\n      )}\n\n      {isOptions && <DrawingPanel />}\n    </div>\n  );\n};\n\nexport default Editor;\n","import React from \"react\";\n//? Styles\nimport \"../styles/app.scss\";\n//? Components\nimport Editor from \"./Editor\";\n\nconst App = () => {\n  return <Editor />;\n};\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./components/App\";\nimport { AppProvider } from \"./context/context\";\nrender(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}